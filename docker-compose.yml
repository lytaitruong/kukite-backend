version: '3.8'

services:
  user-postgresql:
    container_name: user-postgresql
    restart: always
    image: postgres:16
    ports:
      - '3101:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE_USER}
    networks:
      - user-postgresql-network
    volumes:
      - user-volume:/var/lib/postgresql/data

  user-api:
    container_name: user-api
    restart: always
    ports:
      - 3001:3001
    build:
      context: .
      dockerfile: ./apps/user-api/Dockerfile
    env_file: ./apps/user-api/.env
    networks:
      - user-postgresql-network
    depends_on:
      - user-postgresql

  auth-api:
    container_name: auth-api
    restart: always
    ports:
      - 3002:3002
    build:
      context: .
      dockerfile: ./apps/auth-api/Dockerfile
    env_file: ./apps/auth-api/.env
    networks:
      - user-postgresql-network
    depends_on:
      - user-postgresql

  search-api:
    container_name: search-api
    restart: always
    ports:
      - 3003:3003
    build:
      context: .
      dockerfile: ./apps/search-api/Dockerfile
    env_file: ./apps/search-api/.env
    networks:
      - live-postgresql-network
      - video-postgresql-network
    depends_on:
      - live-postgresql
      - video-postgresql

  live-postgresql:
    container_name: live-postgresql
    restart: always
    image: postgres:16
    ports:
      - '3104:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE_USER}
    networks:
      - live-postgresql-network
    volumes:
      - live-volume:/var/lib/postgresql/data

  live-api:
    container_name: live-api
    restart: always
    ports:
      - 3004:3004
    build:
      context: .
      dockerfile: ./apps/live-api/Dockerfile
    env_file: ./apps/live-api/.env
    networks:
      - live-postgresql-network
    depends_on:
      - live-postgresql

  video-postgresql:
    container_name: video-postgresql
    restart: always
    image: postgres:16
    ports:
      - '3105:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE_USER}
    networks:
      - video-postgresql-network
    volumes:
      - video-volume:/var/lib/postgresql/data

  video-api:
    container_name: video-api
    restart: always
    ports:
      - 3005:3005
    build:
      context: .
      dockerfile: ./apps/video-api/Dockerfile
    env_file: ./apps/video-api/.env
    networks:
      - video-postgresql-network
    depends_on:
      - video-postgresql

  business-postgresql:
    container_name: business-postgresql
    restart: always
    image: postgres:16
    ports:
      - '3106:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE_USER}
    networks:
      - business-postgresql-network
    volumes:
      - business-volume:/var/lib/postgresql/data

  business-api:
    container_name: business-api
    restart: always
    ports:
      - 3006:3006
    build:
      context: .
      dockerfile: ./apps/business-api/Dockerfile
    env_file: ./apps/business-api/.env
    networks:
      - business-postgresql-network
    depends_on:
      - business-postgresql

  product-postgresql:
    container_name: product-postgresql
    restart: always
    image: postgres:16
    ports:
      - '3107:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE_USER}
    networks:
      - product-postgresql-network
    volumes:
      - product-volume:/var/lib/postgresql/data

  product-api:
    container_name: product-api
    restart: always
    ports:
      - 3007:3007
    build:
      context: .
      dockerfile: ./apps/product-api/Dockerfile
    env_file: ./apps/product-api/.env
    networks:
      - product-postgresql-network
    depends_on:
      - product-postgresql

  order-postgresql:
    container_name: order-postgresql
    restart: always
    image: postgres:16
    ports:
      - '3108:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE_USER}
    networks:
      - order-postgresql-network
    volumes:
      - order-volume:/var/lib/postgresql/data

  order-api:
    container_name: order-api
    restart: always
    ports:
      - 3008:3008
    build:
      context: .
      dockerfile: ./apps/order-api/Dockerfile
    env_file: ./apps/order-api/.env
    networks:
      - order-postgresql-network
    depends_on:
      - order-postgresql

  payment-postgresql:
    container_name: payment-postgresql
    restart: always
    image: postgres:16
    ports:
      - '3109:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE_USER}
    networks:
      - payment-postgresql-network
    volumes:
      - payment-volume:/var/lib/postgresql/data

  payment-api:
    container_name: payment-api
    restart: always
    ports:
      - 3009:3009
    build:
      context: .
      dockerfile: ./apps/payment-api/Dockerfile
    env_file: ./apps/payment-api/.env
    networks:
      - payment-postgresql-network
    depends_on:
      - payment-postgresql

  notification-postgresql:
    container_name: notification-postgresql
    restart: always
    image: postgres:16
    ports:
      - '3110:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE_USER}
    networks:
      - notification-postgresql-network
    volumes:
      - notification-volume:/var/lib/postgresql/data

  notification-api:
    container_name: notification-api
    restart: always
    ports:
      - 3010:3010
    build:
      context: .
      dockerfile: ./apps/notification-api/Dockerfile
    env_file: ./apps/notification-api/.env
    networks:
      - notification-postgresql-network
    depends_on:
      - notification-postgresql

  campaign-postgresql:
    container_name: campaign-postgresql
    restart: always
    image: postgres:16
    ports:
      - '3111:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE_USER}
    networks:
      - campaign-postgresql-network
    volumes:
      - campaign-volume:/var/lib/postgresql/data

  campaign-api:
    container_name: campaign-api
    restart: always
    ports:
      - 3011:3011
    build:
      context: .
      dockerfile: ./apps/campaign-api/Dockerfile
    env_file: ./apps/campaign-api/.env
    networks:
      - campaign-postgresql-network
    depends_on:
      - campaign-postgresql

networks:
  user-postgresql-network:
    driver: bridge
  live-postgresql-network:
    driver: bridge
  video-postgresql-network:
    driver: bridge
  business-postgresql-network:
    driver: bridge
  product-postgresql-network:
    driver: bridge
  order-postgresql-network:
    driver: bridge
  payment-postgresql-network:
    driver: bridge
  notification-postgresql-network:
    driver: bridge
  campaign-postgresql-network:
    driver: bridge

volumes:
  user-volume:
  live-volume:
  video-volume:
  business-volume:
  product-volume:
  order-volume:
  payment-volume:
  notification-volume:
  campaign-volume:
