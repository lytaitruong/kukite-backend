version: '3.8'

services:
  user-postgresql:
    container_name: user-postgresql
    restart: always
    image: postgres:16
    ports:
      - '3101:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE_USER}
    networks:
      - user-postgresql-network
    volumes:
      - user-volume:/var/lib/postgresql/data

  user-api:
    container_name: user-api
    restart: always
    ports:
      - 3001:3001
    build:
      context: .
      dockerfile: ./apps/user-api/Dockerfile
    env_file: ./apps/user-api/.env
    networks:
      - user-postgresql-network
    depends_on:
      - user-postgresql

  auth-api:
    container_name: auth-api
    restart: always
    ports:
      - 3002:3002
    build:
      context: .
      dockerfile: ./apps/auth-api/Dockerfile
    env_file: ./apps/auth-api/.env
    networks:
      - user-postgresql-network
    depends_on:
      - user-postgresql

  live-postgresql:
    container_name: live-postgresql
    restart: always
    image: postgres:16
    ports:
      - '3104:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE_USER}
    networks:
      - live-postgresql-network
    volumes:
      - live-volume:/var/lib/postgresql/data

  live-api:
    container_name: live-api
    restart: always
    ports:
      - 3004:3004
    build:
      context: .
      dockerfile: ./apps/live-api/Dockerfile
    env_file: ./apps/live-api/.env
    networks:
      - live-postgresql-network
    depends_on:
      - live-postgresql

networks:
  user-postgresql-network:
    driver: bridge
  live-postgresql-network:
    driver: bridge

volumes:
  user-volume:
  live-volume:
